{"version":3,"sources":["app.js","apps.js","aurelia-http-client.js","environment.js","main.js","network.js","platform.js","route-highlight.js","ssid-form.js","ssid-list.js","resources/index.js","styles.less"],"names":["App","configureRouter","config","router","title","map","route","moduleId","name","nav","Apps","timeoutTransformer","callbackParameterNameTransformer","credentialsTransformer","progressTransformer","responseTypeTransformer","headerTransformer","contentTransformer","createJSONPRequestMessageProcessor","createHttpRequestMessageProcessor","Headers","headers","key","toLowerCase","value","add","get","header","undefined","clear","has","hasOwnProperty","configureXHR","xhr","setRequestHeader","parse","headerStr","headerPairs","split","i","length","headerPair","index","indexOf","substring","val","RequestMessage","method","url","content","baseUrl","buildFullUrl","absoluteUrl","test","params","qs","HttpResponseMessage","requestMessage","responseType","reviver","statusCode","status","response","responseText","isSuccess","statusText","mimeType","getAllResponseHeaders","err","requestHeaders","contentType","trim","mimeTypes","_content","JSON","e","applyXhrTransformers","xhrTransformers","client","processor","message","ii","RequestMessageProcessor","xhrType","XHRType","isAborted","abort","readyState","XMLHttpRequest","UNSENT","process","promise","Promise","resolve","reject","onload","ontimeout","onerror","onabort","then","processRequest","open","user","password","send","chain","interceptors","forEach","interceptor","request","requestError","unshift","bind","responseError","push","interceptorsPromise","shift","timeout","callbackParameterName","withCredentials","progressCallback","upload","onprogress","skipContentProcessing","global","FormData","Blob","ArrayBufferView","Document","stringify","replacer","JSONPRequestMessage","JSONPXHR","callbackName","Math","round","random","encodeURIComponent","script","createElement","src","cleanUp","Error","removeNode","data","appendNode","setTimeout","HttpRequestMessage","RequestBuilder","transformers","requestTransformers","slice","useJsonp","asDelete","_addTransformer","asGet","asHead","asOptions","asPatch","asPost","asPut","asJsonp","withUrl","withContent","withBaseUrl","withParams","withResponseType","withTimeout","withHeader","withLogin","withReviver","withReplacer","withProgressCallback","withCallbackParameterName","withInterceptor","fn","addHelper","prototype","apply","arguments","trackRequestStart","pendingRequests","isRequesting","trackRequestEnd","splice","evt","createCustomEvent","bubbles","cancelable","dispatchEvent","HttpClient","requestProcessorFactories","Map","set","configure","builder","createRequest","createProcessor","constructor","catch","cancel","delete","head","jsonp","options","put","patch","post","debug","testing","window","DEBUG_HOST","longStackTraces","warnings","wForgottenReturn","aurelia","use","standardConfiguration","feature","developmentLogging","plugin","start","setRoot","Network","Platform","RouteHighlight","Element","element","eventAggregator","ea","subscription","subscribe","refresh","routesChanged","instruction","currentInstruction","isActive","activeRoute","Array","isArray","routes","includes","highlight","unhighlight","classList","remove","detached","SsidForm","eeprom_ssids","isVisible","heading","host","location","port","ssids","console","log","ssid","staticIp","submit","SsidList","encryptionType","sort","a","b","rssi"],"mappings":"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","file":"app-bundle.js","sourcesContent":["export class App {\n  configureRouter(config, router){\n    config.title = 'XY';\n    config.map([\n      { route: '',\n        title: 'Platform',\n        moduleId: 'platform',\n        name:'platform',\n        nav: true },\n      { route: 'apps',\n        title: 'Apps',\n        moduleId: 'apps',\n        name:'apps',\n        nav: true },\n      { route: 'network',\n        title: 'Network',\n        moduleId: 'network',\n        name:'network',\n        nav: true },\n    ]);\n\n    this.router = router;\n  }\n}\n","\nexport class Apps {\n  constructor() {\n  }\n}\n","import {join,buildQueryString} from 'aurelia-path';\nimport {PLATFORM,DOM} from 'aurelia-pal';\n\n/**\n* Represents http request/response headers.\n*/\nexport class Headers {\n  /**\n  * Creates an instance of the headers class.\n  * @param headers A set of key/values to initialize the headers with.\n  */\n  constructor(headers?: Object = {}) {\n    this.headers = {};\n    // Convert object to set with case insensitive keys\n    for (let key in headers) {\n      this.headers[key.toLowerCase()] = {key, value: headers[key]};\n    }\n  }\n\n  /**\n  * Adds a header.\n  * @param key The header key.\n  * @param value The header value.\n  */\n  add(key: string, value: string): void {\n    this.headers[key.toLowerCase()] = {key, value};\n  }\n\n  /**\n  * Gets a header value.\n  * @param key The header key.\n  * @return The header value.\n  */\n  get(key: string): string {\n    let header = this.headers[key.toLowerCase()];\n    return header ? header.value : undefined;\n  }\n\n  /**\n  * Clears the headers.\n  */\n  clear(): void {\n    this.headers = {};\n  }\n\n  /**\n  * Determines whether or not the indicated header exists in the collection.\n  * @param header The header key to check.\n  * @return True if it exists, false otherwise.\n  */\n  has(header: string): boolean {\n    return this.headers.hasOwnProperty(header.toLowerCase());\n  }\n\n  /**\n  * Configures an XMR object with the headers.\n  * @param xhr The XHRT instance to configure.\n  */\n  configureXHR(xhr: XHR): void {\n    for (let name in this.headers) {\n      if (this.headers.hasOwnProperty(name)) {\n        xhr.setRequestHeader(this.headers[name].key, this.headers[name].value);\n      }\n    }\n  }\n\n  /**\n   * XmlHttpRequest's getAllResponseHeaders() method returns a string of response\n   * headers according to the format described here:\n   * http://www.w3.org/TR/XMLHttpRequest/#the-getallresponseheaders-method\n   * This method parses that string into a user-friendly key/value pair object.\n   * @param headerStr The string from the XHR.\n   * @return A Headers instance containing the parsed headers.\n   */\n  static parse(headerStr: string): Headers {\n    let headers = new Headers();\n    if (!headerStr) {\n      return headers;\n    }\n\n    let headerPairs = headerStr.split('\\u000d\\u000a');\n    for (let i = 0; i < headerPairs.length; i++) {\n      let headerPair = headerPairs[i];\n      // Can't use split() here because it does the wrong thing\n      // if the header value has the string \": \" in it.\n      let index = headerPair.indexOf('\\u003a\\u0020');\n      if (index > 0) {\n        let key = headerPair.substring(0, index);\n        let val = headerPair.substring(index + 2);\n        headers.add(key, val);\n      }\n    }\n\n    return headers;\n  }\n}\n\n/**\n* Represents a request message.\n*/\nexport class RequestMessage {\n  /**\n  * The HTTP method.\n  */\n  method: string;\n\n  /**\n  * The url to submit the request to.\n  */\n  url: string;\n\n  /**\n  * The content of the request.\n  */\n  content: any;\n\n  /**\n  * The headers to send along with the request.\n  */\n  headers: Headers;\n\n  /**\n  * The base url that the request url is joined with.\n  */\n  baseUrl: string;\n\n  /**\n  * Creates an instance of RequestMessage.\n  * @param method The HTTP method.\n  * @param url The url to submit the request to.\n  * @param content The content of the request.\n  * @param headers The headers to send along with the request.\n  */\n  constructor(method: string, url: string, content: any, headers?: Headers) {\n    this.method = method;\n    this.url = url;\n    this.content = content;\n    this.headers = headers || new Headers();\n    this.baseUrl = '';\n  }\n\n  /**\n  * Builds the url to make the request from.\n  * @return The constructed url.\n  */\n  buildFullUrl(): string {\n    let absoluteUrl = /^([a-z][a-z0-9+\\-.]*:)?\\/\\//i;\n    let url = absoluteUrl.test(this.url) ? this.url : join(this.baseUrl, this.url);\n\n    if (this.params) {\n      let qs = buildQueryString(this.params);\n      url = qs ? url + (this.url.indexOf('?') < 0 ? '?' : '&') + qs : url;\n    }\n\n    return url;\n  }\n}\n\n/**\n* Represents a response message from an HTTP or JSONP request.\n*/\nexport class HttpResponseMessage {\n  /**\n  * The request message that resulted in this response.\n  */\n  requestMessage: RequestMessage;\n\n  /**\n  * The status code of the response.\n  */\n  statusCode: number;\n\n  /**\n  * The raw response.\n  */\n  response: any;\n\n  /**\n  * The type of the response.\n  */\n  responseType: string;\n\n  /**\n  * The success status of the request based on status code.\n  */\n  isSuccess: boolean;\n\n  /**\n  * The status text.\n  */\n  statusText: string;\n\n  /**\n  * A reviver function to use in transforming the content.\n  */\n  reviver: (key: string, value: any) => any;\n\n  /**\n  * The mime type of the response.\n  */\n  mimeType: string;\n\n  /**\n  * The headers received with the response.\n  */\n  headers: Headers;\n\n  /**\n  * Creates an instance of HttpResponseMessage.\n  * @param requestMessage The request message that resulted in this response.\n  * @param xhr The XHR instance that made the request.\n  * @param responseType The type of the response.\n  * @param reviver? A reviver function to use in transforming the content.\n  */\n  constructor(requestMessage: RequestMessage, xhr: XHR, responseType: string, reviver?: (key: string, value: any) => any) {\n    this.requestMessage = requestMessage;\n    this.statusCode = xhr.status;\n    this.response = xhr.response || xhr.responseText;\n    this.isSuccess = xhr.status >= 200 && xhr.status < 400;\n    this.statusText = xhr.statusText;\n    this.reviver = reviver;\n    this.mimeType = null;\n\n    if (xhr.getAllResponseHeaders) {\n      try {\n        this.headers = Headers.parse(xhr.getAllResponseHeaders());\n      } catch (err) {\n        //if this fails it means the xhr was a mock object so the `requestHeaders` property should be used\n        if (xhr.requestHeaders) this.headers = new Headers(xhr.requestHeaders);\n      }\n    } else {\n      this.headers = new Headers();\n    }\n\n    let contentType;\n\n    if (this.headers && this.headers.headers) {\n      contentType = this.headers.get('Content-Type');\n    }\n\n    if (contentType) {\n      this.mimeType = responseType = contentType.split(';')[0].trim();\n      if (mimeTypes.hasOwnProperty(this.mimeType)) responseType = mimeTypes[this.mimeType];\n    }\n\n    this.responseType = responseType;\n  }\n\n  /**\n  * Gets the content of the response.\n  * @return the response content.\n  */\n  get content(): any {\n    try {\n      if (this._content !== undefined) {\n        return this._content;\n      }\n\n      if (this.response === undefined || this.response === null || this.response === '') {\n        this._content = this.response;\n        return this._content;\n      }\n\n      if (this.responseType === 'json') {\n        this._content = JSON.parse(this.response, this.reviver);\n        return this._content;\n      }\n\n      if (this.reviver) {\n        this._content = this.reviver(this.response);\n        return this._content;\n      }\n\n      this._content = this.response;\n      return this._content;\n    } catch (e) {\n      if (this.isSuccess) {\n        throw e;\n      }\n\n      this._content = null;\n      return this._content;\n    }\n  }\n}\n\n/**\n * MimeTypes mapped to responseTypes\n *\n * @type {Object}\n */\nexport let mimeTypes = {\n  'text/html': 'html',\n  'text/javascript': 'js',\n  'application/javascript': 'js',\n  'text/json': 'json',\n  'application/json': 'json',\n  'application/rss+xml': 'rss',\n  'application/atom+xml': 'atom',\n  'application/xhtml+xml': 'xhtml',\n  'text/markdown': 'md',\n  'text/xml': 'xml',\n  'text/mathml': 'mml',\n  'application/xml': 'xml',\n  'text/yml': 'yml',\n  'text/csv': 'csv',\n  'text/css': 'css',\n  'text/less': 'less',\n  'text/stylus': 'styl',\n  'text/scss': 'scss',\n  'text/sass': 'sass',\n  'text/plain': 'txt'\n};\n\n/*eslint no-unused-vars:0*/\nfunction applyXhrTransformers(xhrTransformers, client, processor, message, xhr) {\n  let i;\n  let ii;\n\n  for (i = 0, ii = xhrTransformers.length; i < ii; ++i) {\n    xhrTransformers[i](client, processor, message, xhr);\n  }\n}\n\n/**\n * Creates an XHR implementation.\n */\ninterface XHRConstructor {\n\t//new():XHR;\n}\n\n/**\n * Represents an XHR.\n */\ninterface XHR {\n  /**\n  * The status code of the response.\n  */\n  status: number;\n  /**\n  * The status text.\n  */\n  statusText: string;\n  /**\n  * The raw response.\n  */\n  response: any;\n  /**\n  * The raw response text.\n  */\n  responseText: string;\n  /**\n  * The load callback.\n  */\n  onload: Function;\n  /**\n  * The timeout callback.\n  */\n  ontimeout: Function;\n  /**\n  * The error callback.\n  */\n  onerror: Function;\n  /**\n  * The abort callback.\n  */\n  onabort: Function;\n  /**\n  * Aborts the request.\n  */\n  abort(): void;\n  /**\n  * Opens the XHR channel.\n  */\n  open(method: string, url: string, isAsync: boolean, user?: string, password?: string): void;\n  /**\n  * Sends the request.\n  */\n  send(content? : any): void;\n}\n\n/**\n * Represents an XHR transformer.\n */\ninterface XHRTransformer {\n  (client: HttpClient, processor: RequestMessageProcessor, message: RequestMessage, xhr: XHR): void;\n}\n\n/**\n * Processes request messages.\n */\nexport class RequestMessageProcessor {\n  /**\n   * Creates an instance of RequestMessageProcessor.\n   */\n  constructor(xhrType: XHRConstructor, xhrTransformers: XHRTransformer[]) {\n    this.XHRType = xhrType;\n    this.xhrTransformers = xhrTransformers;\n    this.isAborted = false;\n  }\n\n  /**\n   * Aborts the request.\n   */\n  abort(): void {\n    // The logic here is if the xhr object is not set then there is nothing to abort so the intent was carried out\n    // Also test if the XHR is UNSENT - if not, it will be aborted in the process() phase\n    if (this.xhr && this.xhr.readyState !== PLATFORM.XMLHttpRequest.UNSENT) {\n      this.xhr.abort();\n    }\n\n    this.isAborted = true;\n  }\n\n  /**\n   * Processes the request.\n   * @param client The HttpClient making the request.\n   * @param requestMessage The message to process.\n   * @return A promise for an HttpResponseMessage.\n   */\n  process(client: HttpClient, requestMessage: RequestMessage): Promise<HttpResponseMessage> {\n    let promise = new Promise((resolve, reject) => {\n      let xhr = this.xhr = new this.XHRType();\n\n      xhr.onload = (e) => {\n        let response = new HttpResponseMessage(requestMessage, xhr, requestMessage.responseType, requestMessage.reviver);\n        if (response.isSuccess) {\n          resolve(response);\n        } else {\n          reject(response);\n        }\n      };\n\n      xhr.ontimeout = (e) => {\n        reject(new HttpResponseMessage(requestMessage, {\n          response: e,\n          status: xhr.status,\n          statusText: xhr.statusText\n        }, 'timeout'));\n      };\n\n      xhr.onerror = (e) => {\n        reject(new HttpResponseMessage(requestMessage, {\n          response: e,\n          status: xhr.status,\n          statusText: xhr.statusText\n        }, 'error'));\n      };\n\n      xhr.onabort = (e) => {\n        reject(new HttpResponseMessage(requestMessage, {\n          response: e,\n          status: xhr.status,\n          statusText: xhr.statusText\n        }, 'abort'));\n      };\n    });\n\n    return Promise.resolve(requestMessage)\n      .then(message => {\n        let processRequest = () => {\n          if (this.isAborted) {\n            // Some interceptors can delay sending of XHR, so when abort is called\n            // before XHR is actually sent we abort() instead send()\n            this.xhr.abort();\n          } else {\n            this.xhr.open(message.method, message.buildFullUrl(), true, message.user, message.password);\n            applyXhrTransformers(this.xhrTransformers, client, this, message, this.xhr);\n            if (typeof message.content === 'undefined') {\n              // IE serializes undefined as \"undefined\"\n              // some servers reject such requests because of unexpected payload, e.g. in case of DELETE requests\n              this.xhr.send();\n            } else {\n              this.xhr.send(message.content);\n            }\n          }\n\n          return promise;\n        };\n\n        // [ onFullfilled, onReject ] pairs\n        let chain = [[processRequest, undefined]];\n        // Apply interceptors chain from the message.interceptors\n        let interceptors = message.interceptors || [];\n        interceptors.forEach(function(interceptor) {\n          if (interceptor.request || interceptor.requestError) {\n            chain.unshift([\n              interceptor.request ? interceptor.request.bind(interceptor) : undefined,\n              interceptor.requestError ? interceptor.requestError.bind(interceptor) : undefined\n            ]);\n          }\n\n          if (interceptor.response || interceptor.responseError) {\n            chain.push([\n              interceptor.response ? interceptor.response.bind(interceptor) : undefined,\n              interceptor.responseError ? interceptor.responseError.bind(interceptor) : undefined\n            ]);\n          }\n        });\n\n        let interceptorsPromise = Promise.resolve(message);\n\n        while (chain.length) {\n          interceptorsPromise = interceptorsPromise.then(...chain.shift());\n        }\n\n        return interceptorsPromise;\n      });\n  }\n}\n\n/**\n* Adds a timeout to the request.\n* @param client The http client.\n* @param processor The request message processor.\n* @param message The request message.\n* @param xhr The xhr instance.\n*/\nexport function timeoutTransformer(client: HttpClient, processor: RequestMessageProcessor, message: RequestMessage, xhr: XHR) {\n  if (message.timeout !== undefined) {\n    xhr.timeout = message.timeout;\n  }\n}\n\n/**\n* Adds a callback parameter name to the request.\n* @param client The http client.\n* @param processor The request message processor.\n* @param message The request message.\n* @param xhr The xhr instance.\n*/\nexport function callbackParameterNameTransformer(client: HttpClient, processor: RequestMessageProcessor, message: RequestMessage, xhr: XHR) {\n  if (message.callbackParameterName !== undefined) {\n    xhr.callbackParameterName = message.callbackParameterName;\n  }\n}\n\n/**\n* Sets withCredentials on the request.\n* @param client The http client.\n* @param processor The request message processor.\n* @param message The request message.\n* @param xhr The xhr instance.\n*/\nexport function credentialsTransformer(client: HttpClient, processor: RequestMessageProcessor, message: RequestMessage, xhr: XHR) {\n  if (message.withCredentials !== undefined) {\n    xhr.withCredentials = message.withCredentials;\n  }\n}\n\n/**\n* Adds an onprogress callback to the request.\n* @param client The http client.\n* @param processor The request message processor.\n* @param message The request message.\n* @param xhr The xhr instance.\n*/\nexport function progressTransformer(client: HttpClient, processor: RequestMessageProcessor, message: RequestMessage, xhr: XHR) {\n  if (message.progressCallback) {\n    xhr.upload.onprogress = message.progressCallback;\n  }\n}\n\n/**\n* Adds a response type transformer to the request.\n* @param client The http client.\n* @param processor The request message processor.\n* @param message The request message.\n* @param xhr The xhr instance.\n*/\nexport function responseTypeTransformer(client: HttpClient, processor: RequestMessageProcessor, message: RequestMessage, xhr: XHR) {\n  let responseType = message.responseType;\n\n  if (responseType === 'json') {\n    responseType = 'text'; //IE does not support json\n  }\n\n  xhr.responseType = responseType;\n}\n\n/**\n* Adds headers to the request.\n* @param client The http client.\n* @param processor The request message processor.\n* @param message The request message.\n* @param xhr The xhr instance.\n*/\nexport function headerTransformer(client: HttpClient, processor: RequestMessageProcessor, message: RequestMessage, xhr: XHR) {\n  message.headers.configureXHR(xhr);\n}\n\n/**\n* Transforms the content of the request.\n* @param client The http client.\n* @param processor The request message processor.\n* @param message The request message.\n* @param xhr The xhr instance.\n*/\nexport function contentTransformer(client: HttpClient, processor: RequestMessageProcessor, message: RequestMessage, xhr: XHR) {\n  if (message.skipContentProcessing) {\n    return;\n  }\n\n  if (PLATFORM.global.FormData && message.content instanceof FormData) {\n    return;\n  }\n\n  if (PLATFORM.global.Blob && message.content instanceof Blob) {\n    return;\n  }\n\n  if (PLATFORM.global.ArrayBufferView && message.content instanceof ArrayBufferView) {\n    return;\n  }\n\n  if (message.content instanceof Document) {\n    return;\n  }\n\n  if (typeof message.content === 'string') {\n    return;\n  }\n\n  if (message.content === null || message.content === undefined) {\n    return;\n  }\n\n  message.content = JSON.stringify(message.content, message.replacer);\n\n  if (!message.headers.has('Content-Type')) {\n    message.headers.add('Content-Type', 'application/json');\n  }\n}\n\n/**\n* Represents an JSONP request message.\n*/\nexport class JSONPRequestMessage extends RequestMessage {\n  /**\n  * Creates an instance of JSONPRequestMessage.\n  * @param url The url to submit the request to.\n  * @param callbackParameterName The name of the callback parameter that the api expects.\n  */\n  constructor(url: string, callbackParameterName: string) {\n    super('JSONP', url);\n    this.responseType = 'jsonp';\n    this.callbackParameterName = callbackParameterName;\n  }\n}\n\nclass JSONPXHR {\n  open(method: string, url: string): void {\n    this.method = method;\n    this.url = url;\n    this.callbackName = 'jsonp_callback_' + Math.round(100000 * Math.random());\n  }\n\n  send(): void {\n    let url = this.url + (this.url.indexOf('?') >= 0 ? '&' : '?') + encodeURIComponent(this.callbackParameterName) + '=' + this.callbackName;\n    let script = DOM.createElement('script');\n\n    script.src = url;\n    script.onerror = (e) => {\n      cleanUp();\n\n      this.status = 0;\n      this.onerror(new Error('error'));\n    };\n\n    let cleanUp = () => {\n      delete PLATFORM.global[this.callbackName];\n      DOM.removeNode(script);\n    };\n\n    PLATFORM.global[this.callbackName] = (data) => {\n      cleanUp();\n\n      if (this.status === undefined) {\n        this.status = 200;\n        this.statusText = 'OK';\n        this.response = data;\n        this.onload(this);\n      }\n    };\n\n    DOM.appendNode(script);\n\n    if (this.timeout !== undefined) {\n      setTimeout(() => {\n        if (this.status === undefined) {\n          this.status = 0;\n          this.ontimeout(new Error('timeout'));\n        }\n      }, this.timeout);\n    }\n  }\n\n  abort() : void {\n    if (this.status === undefined) {\n      this.status = 0;\n      this.onabort(new Error('abort'));\n    }\n  }\n\n  setRequestHeader() {}\n}\n\n/**\n* Creates a RequestMessageProcessor for handling JSONP request messages.\n* @return A processor instance for JSONP request messages.\n*/\nexport function createJSONPRequestMessageProcessor(): RequestMessageProcessor {\n  return new RequestMessageProcessor(JSONPXHR, [\n    timeoutTransformer,\n    callbackParameterNameTransformer\n  ]);\n}\n\n/**\n* Represents an HTTP request message.\n*/\nexport class HttpRequestMessage extends RequestMessage {\n\n  /**\n  * A replacer function to use in transforming the content.\n  */\n  replacer: (key: string, value: any) => any;\n\n  /**\n  * Creates an instance of HttpRequestMessage.\n  * @param method The http method.\n  * @param url The url to submit the request to.\n  * @param content The content of the request.\n  * @param headers The headers to send along with the request.\n  */\n  constructor(method: string, url: string, content: any, headers?: Headers) {\n    super(method, url, content, headers);\n    this.responseType = 'json'; //text, arraybuffer, blob, document\n  }\n}\n\n/**\n* Creates a RequestMessageProcessor for handling HTTP request messages.\n* @return A processor instance for HTTP request messages.\n*/\nexport function createHttpRequestMessageProcessor(): RequestMessageProcessor {\n  return new RequestMessageProcessor(PLATFORM.XMLHttpRequest, [\n    timeoutTransformer,\n    credentialsTransformer,\n    progressTransformer,\n    responseTypeTransformer,\n    contentTransformer,\n    headerTransformer\n  ]);\n}\n\n/**\n * Intercepts requests, responses and errors.\n */\ninterface Interceptor {\n\t/**\n\t * Intercepts the response.\n\t */\n\tresponse?: (message: HttpResponseMessage) => HttpResponseMessage | Promise<HttpResponseMessage>;\n\t/**\n\t * Intercepts a response error.\n\t */\n\tresponseError?: (error: HttpResponseMessage) => HttpResponseMessage | Promise<HttpResponseMessage>;\n\t/**\n\t * Intercepts the request.\n\t */\n\trequest?: (message: RequestMessage) => RequestMessage | Promise<RequestMessage>;\n\t/**\n\t * Intercepts a request error.\n\t */\n\trequestError?: (error: Error) => RequestMessage | Promise<RequestMessage>;\n}\n\n/**\n * Transforms a request.\n */\ninterface RequestTransformer {\n\t(client: HttpClient, processor: RequestMessageProcessor, message: RequestMessage): void;\n}\n\n/**\n * A builder class allowing fluent composition of HTTP requests.\n */\nexport class RequestBuilder {\n\t/**\n\t * Creates an instance of RequestBuilder\n\t * @param client An instance of HttpClient\n\t */\n  constructor(client: HttpClient) {\n    this.client = client;\n    this.transformers = client.requestTransformers.slice(0);\n    this.useJsonp = false;\n  }\n\n\t/**\n\t * Makes the request a DELETE request.\n\t * @return The chainable RequestBuilder to use in further configuration of the request.\n\t */\n  asDelete(): RequestBuilder {\n    return this._addTransformer(function(client, processor, message) {\n      message.method = 'DELETE';\n    });\n  }\n\n\t/**\n\t * Makes the request a GET request.\n\t * @return The chainable RequestBuilder to use in further configuration of the request.\n\t */\n  asGet(): RequestBuilder  {\n    return this._addTransformer(function(client, processor, message) {\n      message.method = 'GET';\n    });\n  }\n\n\t/**\n\t * Makes the request a HEAD request.\n\t * @return The chainable RequestBuilder to use in further configuration of the request.\n\t */\n  asHead(): RequestBuilder {\n    return this._addTransformer(function(client, processor, message) {\n      message.method = 'HEAD';\n    });\n  }\n\n\t/**\n\t * Makes the request a OPTIONS request.\n\t * @return The chainable RequestBuilder to use in further configuration of the request.\n\t */\n  asOptions(): RequestBuilder {\n    return this._addTransformer(function(client, processor, message) {\n      message.method = 'OPTIONS';\n    });\n  }\n\n\t/**\n\t * Makes the request a PATCH request.\n\t * @return The chainable RequestBuilder to use in further configuration of the request.\n\t */\n  asPatch(): RequestBuilder {\n    return this._addTransformer(function(client, processor, message) {\n      message.method = 'PATCH';\n    });\n  }\n\n\t/**\n\t * Makes the request a POST request.\n\t * @return The chainable RequestBuilder to use in further configuration of the request.\n\t */\n  asPost(): RequestBuilder {\n    return this._addTransformer(function(client, processor, message) {\n      message.method = 'POST';\n    });\n  }\n\n\t/**\n\t * Makes the request a PUT request.\n\t * @return The chainable RequestBuilder to use in further configuration of the request.\n\t */\n  asPut(): RequestBuilder {\n    return this._addTransformer(function(client, processor, message) {\n      message.method = 'PUT';\n    });\n  }\n\n\t/**\n\t * Makes the request a JSONP request.\n\t * @param callbackParameterName The name of the callback to use.\n\t * @return The chainable RequestBuilder to use in further configuration of the request.\n\t */\n  asJsonp(callbackParameterName: string): RequestBuilder {\n    this.useJsonp = true;\n    return this._addTransformer(function(client, processor, message) {\n      message.callbackParameterName = callbackParameterName;\n    });\n  }\n\n\t/**\n\t * Sets the request url.\n\t * @param url The url to use.\n\t * @return The chainable RequestBuilder to use in further configuration of the request.\n\t */\n  withUrl(url: string): RequestBuilder {\n    return this._addTransformer(function(client, processor, message) {\n      message.url = url;\n    });\n  }\n\n\t/**\n\t * Sets the request content.\n\t * @param The content to send.\n\t * @return The chainable RequestBuilder to use in further configuration of the request.\n\t */\n  withContent(content: any): RequestBuilder {\n    return this._addTransformer(function(client, processor, message) {\n      message.content = content;\n    });\n  }\n\n\t/**\n\t * Sets the base url that will be prepended to the url.\n\t * @param baseUrl The base url to use.\n\t * @return The chainable RequestBuilder to use in further configuration of the request.\n\t */\n  withBaseUrl(baseUrl: string): RequestBuilder {\n    return this._addTransformer(function(client, processor, message) {\n      message.baseUrl = baseUrl;\n    });\n  }\n\n\t/**\n\t * Sets params that will be added to the request url as a query string.\n\t * @param params The key/value pairs to use to build the query string.\n\t * @return The chainable RequestBuilder to use in further configuration of the request.\n\t */\n  withParams(params: Object): RequestBuilder {\n    return this._addTransformer(function(client, processor, message) {\n      message.params = params;\n    });\n  }\n\n\t/**\n\t * Sets the response type.\n\t * @param responseType The response type to expect.\n\t * @return The chainable RequestBuilder to use in further configuration of the request.\n\t */\n  withResponseType(responseType: string): RequestBuilder {\n    return this._addTransformer(function(client, processor, message) {\n      message.responseType = responseType;\n    });\n  }\n\n\t/**\n\t * Sets a timeout for the request.\n\t * @param timeout The timeout for the request.\n\t * @return The chainable RequestBuilder to use in further configuration of the request.\n\t */\n  withTimeout(timeout: number): RequestBuilder {\n    return this._addTransformer(function(client, processor, message) {\n      message.timeout = timeout;\n    });\n  }\n\n\t/**\n\t * Sets a header on the request.\n\t * @param key The header key to add.\n\t * @param value The header value to add.\n\t * @return The chainable RequestBuilder to use in further configuration of the request.\n\t */\n  withHeader(key: string, value: string): RequestBuilder {\n    return this._addTransformer(function(client, processor, message) {\n      message.headers.add(key, value);\n    });\n  }\n\n\t/**\n\t * Sets the withCredentials flag on the request.\n\t * @param value The value of the withCredentials flag to set.\n\t * @return The chainable RequestBuilder to use in further configuration of the request.\n\t */\n  withCredentials(value: boolean): RequestBuilder {\n    return this._addTransformer(function(client, processor, message) {\n      message.withCredentials = value;\n    });\n  }\n\n\t/**\n\t * Sets the user and password to use in opening the request.\n\t * @param user The username to send.\n\t * @param password The password to send.\n\t * @return The chainable RequestBuilder to use in further configuration of the request.\n\t */\n  withLogin(user: string, password: string): RequestBuilder {\n    return this._addTransformer(function(client, processor, message) {\n      message.user = user; message.password = password;\n    });\n  }\n\n\t/**\n\t * Sets a reviver to transform the response content.\n\t * @param reviver The reviver to use in processing the response.\n\t * @return The chainable RequestBuilder to use in further configuration of the request.\n\t */\n  withReviver(reviver: (key: string, value: any) => any): RequestBuilder {\n    return this._addTransformer(function(client, processor, message) {\n      message.reviver = reviver;\n    });\n  }\n\n\t/**\n\t * Sets a replacer to transform the request content.\n\t * @param replacer The replacer to use in preparing the request.\n\t * @return The chainable RequestBuilder to use in further configuration of the request.\n\t */\n  withReplacer(replacer: (key: string, value: any) => any): RequestBuilder {\n    return this._addTransformer(function(client, processor, message) {\n      message.replacer = replacer;\n    });\n  }\n\n\t/**\n\t * Sets an upload progress callback.\n\t * @param progressCallback The progress callback function.\n\t * @return The chainable RequestBuilder to use in further configuration of the request.\n\t */\n  withProgressCallback(progressCallback: Function): RequestBuilder {\n    return this._addTransformer(function(client, processor, message) {\n      message.progressCallback = progressCallback;\n    });\n  }\n\n\t/**\n\t * Sets a callback parameter name for JSONP.\n\t * @param callbackParameterName The name of the callback parameter that the JSONP request requires.\n\t * @return The chainable RequestBuilder to use in further configuration of the request.\n\t */\n  withCallbackParameterName(callbackParameterName: string): RequestBuilder {\n    return this._addTransformer(function(client, processor, message) {\n      message.callbackParameterName = callbackParameterName;\n    });\n  }\n\n\t/**\n\t * Adds an interceptor to the request.\n\t * @param interceptor The interceptor to add.\n\t * @return The chainable RequestBuilder to use in further configuration of the request.\n\t */\n  withInterceptor(interceptor: Interceptor): RequestBuilder {\n    return this._addTransformer(function(client, processor, message) {\n      // NOTE: Interceptors are stored in reverse order. Inner interceptors before outer interceptors.\n      // This reversal is needed so that we can build up the interception chain around the\n      // server request.\n      message.interceptors = message.interceptors || [];\n      message.interceptors.unshift(interceptor);\n    });\n  }\n\n\t/**\n\t * Skips the request content processing transform.\n\t * @return The chainable RequestBuilder to use in further configuration of the request.\n\t */\n  skipContentProcessing(): RequestBuilder {\n    return this._addTransformer(function(client, processor, message) {\n      message.skipContentProcessing = true;\n    });\n  }\n\n  _addTransformer(fn) {\n    this.transformers.push(fn);\n    return this;\n  }\n\n  /**\n   * Adds a user-defined request transformer to the RequestBuilder.\n   * @param name The name of the helper to add.\n   * @param fn The helper function.\n   */\n  static addHelper(name: string, fn: () => RequestTransformer): void {\n    RequestBuilder.prototype[name] = function() {\n      return this._addTransformer(fn.apply(this, arguments));\n    };\n  }\n\n  /**\n   * Sends the request.\n   * @return {Promise} A cancellable promise object.\n   */\n  send(): Promise<HttpResponseMessage> {\n    let message = this.useJsonp ? new JSONPRequestMessage() : new HttpRequestMessage();\n    return this.client.send(message, this.transformers);\n  }\n}\n\n/*eslint no-unused-vars:0*/\nfunction trackRequestStart(client: HttpClient, processor: RequestMessageProcessor) {\n  client.pendingRequests.push(processor);\n  client.isRequesting = true;\n}\n\nfunction trackRequestEnd(client: HttpClient, processor: RequestMessageProcessor) {\n  let index = client.pendingRequests.indexOf(processor);\n\n  client.pendingRequests.splice(index, 1);\n  client.isRequesting = client.pendingRequests.length > 0;\n\n  if (!client.isRequesting) {\n    let evt = DOM.createCustomEvent('aurelia-http-client-requests-drained', { bubbles: true, cancelable: true });\n    setTimeout(() => DOM.dispatchEvent(evt), 1);\n  }\n}\n\n/**\n* The main HTTP client object.\n*/\nexport class HttpClient {\n  /**\n  * Indicates whether or not the client is in the process of requesting resources.\n  */\n  isRequesting: boolean = false;\n\n  /**\n  * Creates an instance of HttpClient.\n  */\n  constructor() {\n    this.requestTransformers = [];\n    this.requestProcessorFactories = new Map();\n    this.requestProcessorFactories.set(HttpRequestMessage, createHttpRequestMessageProcessor);\n    this.requestProcessorFactories.set(JSONPRequestMessage, createJSONPRequestMessageProcessor);\n    this.pendingRequests = [];\n  }\n\n  /**\n   * Configure this HttpClient with default settings to be used by all requests.\n   * @param fn A function that takes a RequestBuilder as an argument.\n   */\n  configure(fn: (builder: RequestBuilder) => void): HttpClient {\n    let builder = new RequestBuilder(this);\n    fn(builder);\n    this.requestTransformers = builder.transformers;\n    return this;\n  }\n\n  /**\n   * Returns a new RequestBuilder for this HttpClient instance that can be used to build and send HTTP requests.\n   * @param url The target URL.\n   */\n  createRequest(url: string): RequestBuilder {\n    let builder = new RequestBuilder(this);\n\n    if (url) {\n      builder.withUrl(url);\n    }\n\n    return builder;\n  }\n\n  /**\n   * Sends a message using the underlying networking stack.\n   * @param message A configured HttpRequestMessage or JSONPRequestMessage.\n   * @param transformers A collection of transformers to apply to the HTTP request.\n   * @return A cancellable promise object.\n   */\n  send(requestMessage: RequestMessage, transformers: Array<RequestTransformer>): Promise<HttpResponseMessage> {\n    let createProcessor = this.requestProcessorFactories.get(requestMessage.constructor);\n    let processor;\n    let promise;\n    let i;\n    let ii;\n\n    if (!createProcessor) {\n      throw new Error(`No request message processor factory for ${requestMessage.constructor}.`);\n    }\n\n    processor = createProcessor();\n    trackRequestStart(this, processor);\n\n    transformers = transformers || this.requestTransformers;\n\n    promise = Promise.resolve(requestMessage)\n      .then(message => {\n        // First apply transformers passed to the client.send()\n        for (i = 0, ii = transformers.length; i < ii; ++i) {\n          transformers[i](this, processor, message);\n        }\n\n        return processor.process(this, message).then(response => {\n          trackRequestEnd(this, processor);\n          return response;\n        }).catch(response => {\n          trackRequestEnd(this, processor);\n          throw response;\n        });\n      });\n\n    promise.abort = promise.cancel = function() {\n      processor.abort();\n    };\n\n    return promise;\n  }\n\n  /**\n   * Sends an HTTP DELETE request.\n   * @param url The target URL.\n   * @return A cancellable promise object.\n   */\n  delete(url: string): Promise<HttpResponseMessage> {\n    return this.createRequest(url).asDelete().send();\n  }\n\n  /**\n   * Sends an HTTP GET request.\n   * @param url The target URL.\n   * @return {Promise} A cancellable promise object.\n   */\n  get(url: string): Promise<HttpResponseMessage> {\n    return this.createRequest(url).asGet().send();\n  }\n\n  /**\n   * Sends an HTTP HEAD request.\n   * @param url The target URL.\n   * @return A cancellable promise object.\n   */\n  head(url: string): Promise<HttpResponseMessage> {\n    return this.createRequest(url).asHead().send();\n  }\n\n  /**\n   * Sends a JSONP request.\n   * @param url The target URL.\n   * @return A cancellable promise object.\n   */\n  jsonp(url: string, callbackParameterName: string = 'jsoncallback'): Promise<HttpResponseMessage> {\n    return this.createRequest(url).asJsonp(callbackParameterName).send();\n  }\n\n  /**\n   * Sends an HTTP OPTIONS request.\n   * @param url The target URL.\n   * @return A cancellable promise object.\n   */\n  options(url: string): Promise<HttpResponseMessage> {\n    return this.createRequest(url).asOptions().send();\n  }\n\n  /**\n   * Sends an HTTP PUT request.\n   * @param url The target URL.\n   * @param content The request payload.\n   * @return A cancellable promise object.\n   */\n  put(url: string, content: any): Promise<HttpResponseMessage> {\n    return this.createRequest(url).asPut().withContent(content).send();\n  }\n\n  /**\n   * Sends an HTTP PATCH request.\n   * @param url The target URL.\n   * @param content The request payload.\n   * @return A cancellable promise object.\n   */\n  patch(url: string, content: any): Promise<HttpResponseMessage> {\n    return this.createRequest(url).asPatch().withContent(content).send();\n  }\n\n  /**\n   * Sends an HTTP POST request.\n   * @param url The target URL.\n   * @param content The request payload.\n   * @return A cancellable promise object.\n   */\n  post(url: string, content: any): Promise<HttpResponseMessage> {\n    return this.createRequest(url).asPost().withContent(content).send();\n  }\n}\n","export default {\n  debug: true,\n  testing: true\n};\n","import environment from './environment';\n\nwindow.DEBUG_HOST = 'http://192.168.1.235';\n\n//Configure Bluebird Promises.\nPromise.config({\n  longStackTraces: environment.debug,\n  warnings: {\n    wForgottenReturn: false\n  }\n});\n\nexport function configure(aurelia) {\n  aurelia.use\n    .standardConfiguration()\n    .feature('resources');\n\n  if (environment.debug) {\n    aurelia.use.developmentLogging();\n  }\n\n  if (environment.testing) {\n    aurelia.use.plugin('aurelia-testing');\n  }\n\n  aurelia.start().then(() => aurelia.setRoot());\n}\n","\n\nexport class Network {\n  constructor() {\n  }\n}\n","\nexport class Platform {\n  constructor() {\n  }\n}\n","import {inject, bindable, customAttribute} from 'aurelia-framework';\nimport {Router} from 'aurelia-router';\nimport {EventAggregator} from 'aurelia-event-aggregator';\n\n@inject(Element, Router, EventAggregator)\n@customAttribute('route-highlight')\nexport class RouteHighlight {\n\n    @bindable routes;\n\n    constructor(element, router, eventAggregator) {\n      this.element = element;\n      this.router = router;\n      this.ea = eventAggregator;\n\n      this.subscription = this.ea.subscribe('router:navigation:complete', () => this.refresh());\n    }\n\n    routesChanged() {\n      this.refresh();\n    }\n\n    refresh() {\n      let instruction = this.router.currentInstruction;\n      let isActive = false;\n\n      if (instruction) {\n        let activeRoute = instruction.config.name;\n\n        if (Array.isArray(this.routes)) {\n          isActive = this.routes.includes(activeRoute);\n        } else {\n          isActive = this.routes === activeRoute;\n        }\n      }\n\n      if (isActive) {\n        this.highlight();\n      } else {\n        this.unhighlight();\n      }\n    }\n\n    highlight() {\n      this.element.classList.add('active');\n    }\n\n    unhighlight() {\n      this.element.classList.remove('active');\n    }\n\n    detached() {\n      if (this.subscription) {\n        this.subscription();\n      }\n    }\n}\n","import {HttpClient} from 'aurelia-http-client';\n\nexport class SsidForm {\n  constructor() {\n    this.eeprom_ssids = [];\n    this.refresh();\n  }\n\n  refresh() {\n    this.isVisible = false;\n    this.heading = \"Loading WiFi AP settings ...\";\n\n    let client = new HttpClient();\n    let host = (location.port === '9000' ? window.DEBUG_HOST  : '');\n    client.get(host + '/eepromssids')\n    .then(data => {\n      try {\n        var ssids = JSON.parse(data.response);\n      } catch(e) {\n        console.log('Invalid json in eepromssids ajax response',\n                     data.response);\n        return;\n      }\n      for(let i=1; i < ssids.length; i++) {\n        let ssid = ssids[i];\n        ssid.staticIp = (ssid.staticIp == '0.0.0.0') ? \"\" : ssid.staticIp;\n      }\n      this.eeprom_ssids = ssids.slice(1);\n      this.heading = \"WiFi AP settings\";\n      this.isVisible = true;\n    });\n  }\n\n  submit() {\n    console.log(\"eeprom_ssids save:\", this.eeprom_ssids);\n  }\n}\n","import {HttpClient} from 'aurelia-http-client';\n\nexport class SsidList {\n  constructor() {\n    this.ssids = [];\n    this.refresh();\n  }\n\n  refresh() {\n    this.isVisible = false;\n\n    let client = new HttpClient();\n    let host = (location.port === '9000' ? window.DEBUG_HOST  : '');\n    client.get(host + '/ssids')\n      .then(data => {\n        try {\n          var ssids = JSON.parse(data.response);\n        } catch(e) {\n          console.log('Invalid json in ssids ajax response', data.response);\n          return;\n        }\n        for(let ssid of ssids)\n          ssid.encryptionType = (ssid.encryptionType == 'NONE') ? \"yes\" : \"\";\n        ssids.sort((a,b) => b.rssi - a.rssi);\n        this.ssids = ssids;\n        this.isVisible = true;\n      });\n  }\n\n  add(ssid) {\n    console.log(\"Add:\",ssid);\n  }\n}\n","export function configure(config) {\n  //config.globalResources([]);\n}\n","\nhtml { box-sizing: border-box; }\n*, *:before, *:after { box-sizing: inherit; }\n\na {\n  text-decoration: none;\n  color: black;\n}\n\nbody {\n  padding: 10px 20px;\n}\n\n.navbar {\n  border: 1px solid black;\n  padding: 4px;\n}\n.xy-hdr {\n  float:right;\n  font-size:20px;\n  font-weight:bold;\n  margin-top:15px;\n}\n\n.nav-btn {\n  padding:2px;\n  border: 1px solid gray;\n  font-weight:bold;\n  border-radius: 5px;\n  background-color:#eee;\n  margin:5px;\n  &.active {\n    color:gray;\n  }\n}\n\n.router-view {\n  width:100%;\n  margin-top:15px;\n}\n\n.ssid-table {\n  margin-top:5px;\n  th { text-align: left; }\n  td {\n    padding:3px 5px;\n    button {\n      margin-right: 15px;\n    }\n  }\n}\n"],"sourceRoot":"../src"}